常用性能优化方式

1、创建mysql数据库索引、结合业务将逻辑放在存储过程中处理。
   （复合索引、表分区等 ）利用索引，然后精确查找。
    场景： 如果查询当日收盘后行情数据，应该直接根据stockcode(股票代码)和tradedate(交易日期)查询。
	       而不是根据stockcode查询出该股票的大量交易数据，然后按照tradedate倒序取第一条。
   
2、通过定时任务将数据放入redis。
   场景： 计算股票量比时，现将过去5个交易日的平均每分钟成交量(last5AvgVol)计算完成，放入redis。
          开盘后实时获取vol和开盘分钟数， 再从redis取出数据last5AvgVol,这样量比计算速度大幅提升。
   
3、减少与mysql的交互，把业务逻辑放在程序中处理。
   场景：比如当日收盘后要分别取3000多只股票的市销率，你是根据每只股票的stockcode和tradedate去查询数据库得到
   ps（市销率）呢？ 还是先根据tradedate一次性从数据库中查询所有股票的ps记录list(包括stockcode)，然后在程序中
   再去根据list和stockcode得到单只股票的市销率？ 显然第二种方式效率更高。
   
4、结合具体业务，如果数据即可从redis中取，又可从数据库中查询。那优选选择从redis中取。
	例如说，我要得到股票收盘价，如果我的实时行情缓存redis中已经有了股票的最新价（NowPrice）,那么收盘后NowPrice就是收盘价，
	可以直接从redis读取它（而不是再去数据库中查询每日行情表得到收盘价）。
	
5、多线程并发运算。

8、连接池优化druid . 

6、mysql(分库分表、读写分离)、mycat数据分区、keepalived 负载均衡

7、nginx、F5应用负载均衡。
   
   
   